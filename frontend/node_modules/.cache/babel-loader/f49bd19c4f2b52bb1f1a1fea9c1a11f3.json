{"ast":null,"code":"var _jsxFileName = \"/Users/yasmine/Desktop/stage/aidchannel-front/src/pages/webmaster/TwitterValidation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { acceptTweet, getAllTweetsByCountryPagination, refuseTweet } from \"../../apis/twitterApi\";\nimport Post from \"../../components/aidchannel/tweets/Post\";\nimport useIntersectionObserver from \"../../helpers/useIntersectionObserver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TwitterValidation = () => {\n  _s();\n\n  const [limit] = useState(16);\n  const {\n    codeCountry\n  } = useParams();\n  const loadMoreButtonRef = useRef();\n  const [test, setTest] = useState(false);\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage\n  } = useInfiniteQuery([codeCountry, limit, test], getAllTweetsByCountryPagination, {\n    getNextPageParam: (lastPage, pages) => {\n      if (lastPage.data.length === limit) return parseInt(lastPage.page) + 1;\n      return false;\n    }\n  });\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n\n  const acceptTwitterTweet = async tweetId => {\n    await acceptTweet(tweetId);\n    setTest(!test);\n  };\n\n  const refuseTwitterTweet = async tweetId => {\n    await refuseTweet(tweetId);\n    setTest(!test);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row ml-5 mt-4\",\n      children: data === null || data === void 0 ? void 0 : data.pages.map((group, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: group.data.map((tweet, index) => {\n          var _tweet$photos;\n\n          return tweet.twitter_username && tweet.tweet_id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12  p-2 col-lg-5 mx-auto mt-3 border\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              style: {\n                textDecoration: \"none\"\n              },\n              href: `https://twitter.com/${tweet === null || tweet === void 0 ? void 0 : tweet.twitter_username}/status/${tweet === null || tweet === void 0 ? void 0 : tweet.tweet_id}`,\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(Post, {\n                displayName: tweet === null || tweet === void 0 ? void 0 : tweet.name,\n                username: tweet === null || tweet === void 0 ? void 0 : tweet.twitter_username,\n                verified: true,\n                text: tweet === null || tweet === void 0 ? void 0 : tweet.body,\n                avatar: tweet === null || tweet === void 0 ? void 0 : tweet.avatar_id,\n                image: (tweet === null || tweet === void 0 ? void 0 : (_tweet$photos = tweet.photos) === null || _tweet$photos === void 0 ? void 0 : _tweet$photos.length) > 0 && tweet.photos[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => acceptTwitterTweet(tweet === null || tweet === void 0 ? void 0 : tweet._id),\n                className: \"btn btn-success shadow-none mr-4\",\n                children: \"Accept\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => refuseTwitterTweet(tweet === null || tweet === void 0 ? void 0 : tweet._id),\n                className: \"btn btn-danger shadow-none\",\n                children: \"Refuse\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 19\n          }, this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: loadMoreButtonRef,\n        onClick: () => fetchNextPage(),\n        disabled: !hasNextPage || isFetchingNextPage,\n        children: isFetchingNextPage ? \"Loading more ....\" : hasNextPage ? \"Load More\" : \"Nothing more to load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TwitterValidation, \"84TNue4fCBW3yD1WYCl6WnQU3aI=\", false, function () {\n  return [useParams, useInfiniteQuery, useIntersectionObserver];\n});\n\n_c = TwitterValidation;\nexport default TwitterValidation;\n\nvar _c;\n\n$RefreshReg$(_c, \"TwitterValidation\");","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/pages/webmaster/TwitterValidation.js"],"names":["React","useState","useRef","useInfiniteQuery","useParams","acceptTweet","getAllTweetsByCountryPagination","refuseTweet","Post","useIntersectionObserver","TwitterValidation","limit","codeCountry","loadMoreButtonRef","test","setTest","data","fetchNextPage","hasNextPage","isFetchingNextPage","getNextPageParam","lastPage","pages","length","parseInt","page","target","onIntersect","enabled","acceptTwitterTweet","tweetId","refuseTwitterTweet","map","group","i","tweet","index","twitter_username","tweet_id","textDecoration","name","body","avatar_id","photos","_id","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SACEC,WADF,EAEEC,+BAFF,EAGEC,WAHF,QAIO,uBAJP;AAMA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,uBAAP,MAAoC,uCAApC;;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,KAAD,IAAUV,QAAQ,CAAC,EAAD,CAAxB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAkBR,SAAS,EAAjC;AACA,QAAMS,iBAAiB,GAAGX,MAAM,EAAhC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAM;AACJe,IAAAA,IADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA;AAJI,MAKFhB,gBAAgB,CAClB,CAACS,WAAD,EAAcD,KAAd,EAAqBG,IAArB,CADkB,EAElBR,+BAFkB,EAGlB;AACEc,IAAAA,gBAAgB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACrC,UAAID,QAAQ,CAACL,IAAT,CAAcO,MAAd,KAAyBZ,KAA7B,EAAoC,OAAOa,QAAQ,CAACH,QAAQ,CAACI,IAAV,CAAR,GAA0B,CAAjC;AACpC,aAAO,KAAP;AACD;AAJH,GAHkB,CALpB;AAgBAhB,EAAAA,uBAAuB,CAAC;AACtBiB,IAAAA,MAAM,EAAEb,iBADc;AAEtBc,IAAAA,WAAW,EAAEV,aAFS;AAGtBW,IAAAA,OAAO,EAAEV;AAHa,GAAD,CAAvB;;AAMA,QAAMW,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AAC5C,UAAMzB,WAAW,CAACyB,OAAD,CAAjB;AACAf,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAHD;;AAIA,QAAMiB,kBAAkB,GAAG,MAAOD,OAAP,IAAmB;AAC5C,UAAMvB,WAAW,CAACuB,OAAD,CAAjB;AACAf,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBACGE,IADH,aACGA,IADH,uBACGA,IAAI,CAAEM,KAAN,CAAYU,GAAZ,CAAgB,CAACC,KAAD,EAAQC,CAAR,kBACf,QAAC,KAAD,CAAO,QAAP;AAAA,kBACGD,KAAK,CAACjB,IAAN,CAAWgB,GAAX,CACC,CAACG,KAAD,EAAQC,KAAR;AAAA;;AAAA,iBACED,KAAK,CAACE,gBAAN,IACAF,KAAK,CAACG,QADN,iBAEE;AAEE,YAAA,SAAS,EAAC,0CAFZ;AAAA,oCAIE;AACE,cAAA,KAAK,EAAE;AAAEC,gBAAAA,cAAc,EAAE;AAAlB,eADT;AAEE,cAAA,IAAI,EAAG,uBAAsBJ,KAAvB,aAAuBA,KAAvB,uBAAuBA,KAAK,CAAEE,gBAAiB,WAAUF,KAAzD,aAAyDA,KAAzD,uBAAyDA,KAAK,CAAEG,QAAS,EAFjF;AAGE,cAAA,MAAM,EAAC,QAHT;AAIE,cAAA,GAAG,EAAC,YAJN;AAAA,qCAME,QAAC,IAAD;AACE,gBAAA,WAAW,EAAEH,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEK,IADtB;AAEE,gBAAA,QAAQ,EAAEL,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEE,gBAFnB;AAGE,gBAAA,QAAQ,EAAE,IAHZ;AAIE,gBAAA,IAAI,EAAEF,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEM,IAJf;AAKE,gBAAA,MAAM,EAAEN,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEO,SALjB;AAME,gBAAA,KAAK,EAAE,CAAAP,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEQ,MAAP,gEAAepB,MAAf,IAAwB,CAAxB,IAA6BY,KAAK,CAACQ,MAAN,CAAa,CAAb;AANtC;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,oBAJF,eAmBE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,sCACE;AACE,gBAAA,OAAO,EAAE,MAAMd,kBAAkB,CAACM,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAES,GAAR,CADnC;AAEE,gBAAA,SAAS,EAAC,kCAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE;AACE,gBAAA,OAAO,EAAE,MAAMb,kBAAkB,CAACI,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAES,GAAR,CADnC;AAEE,gBAAA,SAAS,EAAC,4BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnBF;AAAA,aACOR,KADP;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA,SADD;AADH,SAAqBF,CAArB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eA+CE;AAAK,MAAA,KAAK,EAAE;AAAEW,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,6BACE;AACE,QAAA,GAAG,EAAEhC,iBADP;AAEE,QAAA,OAAO,EAAE,MAAMI,aAAa,EAF9B;AAGE,QAAA,QAAQ,EAAE,CAACC,WAAD,IAAgBC,kBAH5B;AAAA,kBAKGA,kBAAkB,GACf,mBADe,GAEfD,WAAW,GACX,WADW,GAEX;AATN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA/CF;AAAA,kBADF;AA+DD,CApGD;;GAAMR,iB;UAEoBN,S,EASpBD,gB,EAWJM,uB;;;KAtBIC,iB;AAsGN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  acceptTweet,\n  getAllTweetsByCountryPagination,\n  refuseTweet,\n} from \"../../apis/twitterApi\";\n\nimport Post from \"../../components/aidchannel/tweets/Post\";\nimport useIntersectionObserver from \"../../helpers/useIntersectionObserver\";\n\nconst TwitterValidation = () => {\n  const [limit] = useState(16);\n  const { codeCountry } = useParams();\n  const loadMoreButtonRef = useRef();\n  const [test, setTest] = useState(false);\n\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useInfiniteQuery(\n    [codeCountry, limit, test],\n    getAllTweetsByCountryPagination,\n    {\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.data.length === limit) return parseInt(lastPage.page) + 1;\n        return false;\n      },\n    }\n  );\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  });\n\n  const acceptTwitterTweet = async (tweetId) => {\n    await acceptTweet(tweetId);\n    setTest(!test);\n  };\n  const refuseTwitterTweet = async (tweetId) => {\n    await refuseTweet(tweetId);\n    setTest(!test);\n  };\n\n  return (\n    <>\n      <div className=\"row ml-5 mt-4\">\n        {data?.pages.map((group, i) => (\n          <React.Fragment key={i}>\n            {group.data.map(\n              (tweet, index) =>\n                tweet.twitter_username &&\n                tweet.tweet_id && (\n                  <div\n                    key={index}\n                    className=\"col-12  p-2 col-lg-5 mx-auto mt-3 border\"\n                  >\n                    <a\n                      style={{ textDecoration: \"none\" }}\n                      href={`https://twitter.com/${tweet?.twitter_username}/status/${tweet?.tweet_id}`}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      <Post\n                        displayName={tweet?.name}\n                        username={tweet?.twitter_username}\n                        verified={true}\n                        text={tweet?.body}\n                        avatar={tweet?.avatar_id}\n                        image={tweet?.photos?.length > 0 && tweet.photos[0]}\n                      />\n                    </a>\n                    <div className=\"mt-3\">\n                      <button\n                        onClick={() => acceptTwitterTweet(tweet?._id)}\n                        className=\"btn btn-success shadow-none mr-4\"\n                      >\n                        Accept\n                      </button>\n                      <button\n                        onClick={() => refuseTwitterTweet(tweet?._id)}\n                        className=\"btn btn-danger shadow-none\"\n                      >\n                        Refuse\n                      </button>\n                    </div>\n                  </div>\n                )\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n      <div style={{ marginTop: \"20px\" }}>\n        <button\n          ref={loadMoreButtonRef}\n          onClick={() => fetchNextPage()}\n          disabled={!hasNextPage || isFetchingNextPage}\n        >\n          {isFetchingNextPage\n            ? \"Loading more ....\"\n            : hasNextPage\n            ? \"Load More\"\n            : \"Nothing more to load\"}\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TwitterValidation;\n"]},"metadata":{},"sourceType":"module"}