{"ast":null,"code":"var _jsxFileName = \"/Users/yasmine/Desktop/stage/aidchannel-front/src/components/aidchannel/webmaster/EditGraphTechnicalDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Tree from \"react-tree-graph\";\nimport Modal from \"react-modal\";\nimport { getProjectImpactsAllData } from \"apis/impactApi\";\nimport \"react-tree-graph/dist/style.css\";\nimport \"./EditGraphTechnicalDetails.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\nModal.setAppElement(\"#root\");\n\nconst EditGraphTechnicalDetails = () => {\n  _s();\n\n  const {\n    idProject\n  } = useParams();\n  const [impacts, setImpacts] = useState([]);\n  const [data, setData] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [selectedNode, setSelectedNode] = useState();\n  const getDataFromApi = useCallback(async () => {\n    const impacts = await getProjectImpactsAllData(idProject);\n    const head = impacts[0]; //head.outcomes.outputs.children = head?.outcomes?.outputs?.activities;\n    //  head.outcomes.children = head?.outcomes?.outputs;\n\n    if (head !== undefined) {\n      head.children = head === null || head === void 0 ? void 0 : head.outcomes;\n      head.textProps = {\n        x: 0,\n        y: 50\n      };\n      head.children.map(item => {\n        item.children = item.outputs;\n        item.textProps = {\n          x: -25,\n          y: 25\n        };\n      });\n      head.children.map(item => {\n        item.children.map(act => {\n          act.children = act.activities;\n          act.textProps = {\n            x: -25,\n            y: 25\n          };\n        });\n      });\n      setData(head);\n    }\n  }, []);\n  useEffect(() => {\n    getDataFromApi();\n  }, [getDataFromApi]);\n\n  function handleClick(event, node) {\n    console.log(event, \"event\");\n    setSelectedNode(node);\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        gProps: {\n          className: \"node\",\n          onClick: handleClick\n        },\n        animated: true,\n        keyProp: \"_id\",\n        labelProp: \"content\",\n        nodeProps: {\n          r: 10\n        } //   getChildren={(node) => console.log(node.children)}\n        ,\n        data: data,\n        height: 500,\n        width: 900,\n        nodeShape: \"circle\",\n        svgProps: {\n          className: \"custom\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modalIsOpen,\n        onRequestClose: closeModal,\n        style: customStyles,\n        contentLabel: \"Example Modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"id:\", selectedNode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeModal,\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditGraphTechnicalDetails, \"3NFP4FdQwmx8kON78Vmd7myjsUU=\", false, function () {\n  return [useParams];\n});\n\n_c = EditGraphTechnicalDetails;\nexport default EditGraphTechnicalDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditGraphTechnicalDetails\");","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/components/aidchannel/webmaster/EditGraphTechnicalDetails.js"],"names":["React","useState","useEffect","useCallback","useParams","Tree","Modal","getProjectImpactsAllData","customStyles","content","top","left","right","bottom","marginRight","transform","setAppElement","EditGraphTechnicalDetails","idProject","impacts","setImpacts","data","setData","modalIsOpen","setIsOpen","selectedNode","setSelectedNode","getDataFromApi","head","undefined","children","outcomes","textProps","x","y","map","item","outputs","act","activities","handleClick","event","node","console","log","closeModal","className","onClick","r"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Tree from \"react-tree-graph\";\nimport Modal from \"react-modal\";\nimport { getProjectImpactsAllData } from \"apis/impactApi\";\nimport \"react-tree-graph/dist/style.css\";\nimport \"./EditGraphTechnicalDetails.css\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nModal.setAppElement(\"#root\");\n\nconst EditGraphTechnicalDetails = () => {\n  const { idProject } = useParams();\n  const [impacts, setImpacts] = useState([]);\n  const [data, setData] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [selectedNode, setSelectedNode] = useState();\n\n  const getDataFromApi = useCallback(async () => {\n    const impacts = await getProjectImpactsAllData(idProject);\n    const head = impacts[0];\n    //head.outcomes.outputs.children = head?.outcomes?.outputs?.activities;\n    //  head.outcomes.children = head?.outcomes?.outputs;\n    if (head !== undefined) {\n      head.children = head?.outcomes;\n      head.textProps = { x: 0, y: 50 };\n      head.children.map((item) => {\n        item.children = item.outputs;\n        item.textProps = { x: -25, y: 25 };\n      });\n      head.children.map((item) => {\n        item.children.map((act) => {\n          act.children = act.activities;\n          act.textProps = { x: -25, y: 25 };\n        });\n      });\n      setData(head);\n    }\n  }, []);\n\n  useEffect(() => {\n    getDataFromApi();\n  }, [getDataFromApi]);\n\n  function handleClick(event, node) {\n    console.log(event, \"event\");\n    setSelectedNode(node);\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n  return (\n    <>\n      <div>\n        <Tree\n          gProps={{\n            className: \"node\",\n            onClick: handleClick,\n          }}\n          animated={true}\n          keyProp=\"_id\"\n          labelProp=\"content\"\n          nodeProps={{\n            r: 10,\n          }}\n          //   getChildren={(node) => console.log(node.children)}\n          data={data}\n          height={500}\n          width={900}\n          nodeShape=\"circle\"\n          svgProps={{\n            className: \"custom\",\n          }}\n        />\n      </div>\n      <div>\n        <Modal\n          isOpen={modalIsOpen}\n          onRequestClose={closeModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n          <h2>Edit</h2>\n          <h4>id:{selectedNode}</h4>\n          <input type=\"text\" placeholder=\"Name\" />\n          <button>Edit</button>\n          <button onClick={closeModal}>close</button>\n        </Modal>\n      </div>\n    </>\n  );\n};\n\nexport default EditGraphTechnicalDetails;\n"]},"metadata":{},"sourceType":"module"}