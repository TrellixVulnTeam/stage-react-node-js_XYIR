{"ast":null,"code":"var _jsxFileName = \"/Users/yasmine/Desktop/stage/aidchannel-front/src/components/linkedin/networkGraph/NetworkGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { useHistory } from \"react-router\";\nimport { getOneUser } from \"apis/userApi\";\nimport urlImageAdapter from \"helpers/urlImageAdapter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NetworkGraph = () => {\n  _s();\n\n  const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n  const [user, setUser] = useState();\n  const [graph, setGraph] = useState({\n    nodes: [],\n    edges: []\n  });\n  const history = useHistory();\n  const options = {\n    layout: {\n      hierarchical: true\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    interaction: {\n      zoomView: false\n    },\n    physics: {\n      forceAtlas2Based: {\n        gravitationalConstant: -26,\n        centralGravity: 0.005,\n        springLength: 230,\n        springConstant: 0.18\n      },\n      maxVelocity: 146,\n      solver: \"forceAtlas2Based\",\n      timestep: 0.35,\n      stabilization: {\n        enabled: true,\n        iterations: 2000,\n        updateInterval: 25\n      }\n    },\n    height: \"500px\"\n  };\n  const getDataFromApi = useCallback(async () => {\n    var _userInfo$user, _user$connections;\n\n    const user = await getOneUser(userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$user = userInfo.user) === null || _userInfo$user === void 0 ? void 0 : _userInfo$user._id);\n    setUser(user);\n    let nodes = [];\n    let edges = [];\n    nodes = [...nodes, { ...user,\n      id: user === null || user === void 0 ? void 0 : user._id,\n      label: user === null || user === void 0 ? void 0 : user.fullname,\n      margin: 20,\n      borderWidth: 10,\n      color: {\n        border: \"red\"\n      },\n      shape: \"circularImage\",\n      image: urlImageAdapter(user === null || user === void 0 ? void 0 : user.image_url)\n    }];\n    user === null || user === void 0 ? void 0 : (_user$connections = user.connections) === null || _user$connections === void 0 ? void 0 : _user$connections.map(connection => {\n      nodes.push({ ...connection,\n        ...{\n          id: connection === null || connection === void 0 ? void 0 : connection._id,\n          label: connection === null || connection === void 0 ? void 0 : connection.fullname,\n          margin: 20,\n          borderWidth: 4,\n          color: {\n            border: \"#0a66c2\"\n          },\n          font: \"14px arail blue\",\n          shape: \"circularImage\",\n          image: urlImageAdapter(connection === null || connection === void 0 ? void 0 : connection.image_url)\n        }\n      });\n      edges.push({\n        from: user._id,\n        to: connection === null || connection === void 0 ? void 0 : connection._id,\n        arrows: {\n          to: false,\n          from: false\n        }\n      });\n    });\n    setGraph({ ...graph,\n      nodes,\n      edges\n    });\n  }, []);\n  useEffect(() => {\n    getDataFromApi();\n  }, [getDataFromApi]);\n  const events = {\n    select: event => {\n      if (event.nodes.length > 0) history.push(`/linkedin/profil/${event.nodes}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Graph, {\n      graph: graph,\n      options: options,\n      events: events,\n      getNetwork: network => {//  if you want access to vis.js network api you can set the state in a parent component using this property\n      }\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NetworkGraph, \"0B+bK9cRX8I2dxZZhILAnDlJEcM=\", false, function () {\n  return [useHistory];\n});\n\n_c = NetworkGraph;\nexport default NetworkGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/components/linkedin/networkGraph/NetworkGraph.js"],"names":["React","useState","useEffect","useCallback","Graph","useHistory","getOneUser","urlImageAdapter","NetworkGraph","userInfo","JSON","parse","localStorage","getItem","user","setUser","graph","setGraph","nodes","edges","history","options","layout","hierarchical","color","interaction","zoomView","physics","forceAtlas2Based","gravitationalConstant","centralGravity","springLength","springConstant","maxVelocity","solver","timestep","stabilization","enabled","iterations","updateInterval","height","getDataFromApi","_id","id","label","fullname","margin","borderWidth","border","shape","image","image_url","connections","map","connection","push","font","from","to","arrows","events","select","event","length","network","Math","random"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { useHistory } from \"react-router\";\nimport { getOneUser } from \"apis/userApi\";\nimport urlImageAdapter from \"helpers/urlImageAdapter\";\n\nconst NetworkGraph = () => {\n  const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n  const [user, setUser] = useState();\n  const [graph, setGraph] = useState({\n    nodes: [],\n    edges: [],\n  });\n\n  const history = useHistory();\n  const options = {\n    layout: {\n      hierarchical: true,\n    },\n    edges: {\n      color: \"#000000\",\n    },\n    interaction: {\n      zoomView: false,\n    },\n    physics: {\n      forceAtlas2Based: {\n        gravitationalConstant: -26,\n        centralGravity: 0.005,\n        springLength: 230,\n        springConstant: 0.18,\n      },\n      maxVelocity: 146,\n      solver: \"forceAtlas2Based\",\n      timestep: 0.35,\n      stabilization: {\n        enabled: true,\n        iterations: 2000,\n        updateInterval: 25,\n      },\n    },\n\n    height: \"500px\",\n  };\n\n  const getDataFromApi = useCallback(async () => {\n    const user = await getOneUser(userInfo?.user?._id);\n    setUser(user);\n\n    let nodes = [];\n    let edges = [];\n    nodes = [\n      ...nodes,\n      {\n        ...user,\n        id: user?._id,\n        label: user?.fullname,\n        margin: 20,\n        borderWidth: 10,\n        color: { border: \"red\" },\n\n        shape: \"circularImage\",\n        image: urlImageAdapter(user?.image_url),\n      },\n    ];\n    user?.connections?.map((connection) => {\n      nodes.push({\n        ...connection,\n        ...{\n          id: connection?._id,\n          label: connection?.fullname,\n          margin: 20,\n          borderWidth: 4,\n          color: { border: \"#0a66c2\" },\n          font: \"14px arail blue\",\n          shape: \"circularImage\",\n          image: urlImageAdapter(connection?.image_url),\n        },\n      });\n      edges.push({\n        from: user._id,\n        to: connection?._id,\n        arrows: { to: false, from: false },\n      });\n    });\n\n    setGraph({ ...graph, nodes, edges });\n  }, []);\n\n  useEffect(() => {\n    getDataFromApi();\n  }, [getDataFromApi]);\n\n  const events = {\n    select: (event) => {\n      if (event.nodes.length > 0)\n        history.push(`/linkedin/profil/${event.nodes}`);\n    },\n  };\n\n  return (\n    <div>\n      {\" \"}\n      <Graph\n        key={Math.random()}\n        graph={graph}\n        options={options}\n        events={events}\n        getNetwork={(network) => {\n          //  if you want access to vis.js network api you can set the state in a parent component using this property\n        }}\n      />\n    </div>\n  );\n};\n\nexport default NetworkGraph;\n"]},"metadata":{},"sourceType":"module"}