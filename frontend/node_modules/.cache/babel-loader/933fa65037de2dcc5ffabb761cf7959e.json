{"ast":null,"code":"var _jsxFileName = \"/Users/yasmine/Desktop/stage/aidchannel-front/src/pages/webmaster/TweetsValid\\xE9s.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { getTweetsAccepted } from \"../../apis/twitterApi\";\nimport Post from \"../../components/aidchannel/tweets/Post\";\nimport useIntersectionObserver from \"../../helpers/useIntersectionObserver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TweetsValidés = () => {\n  _s();\n\n  const [limit] = useState(4);\n  const {\n    codeCountry\n  } = useParams();\n  const loadMoreButtonRef = useRef();\n  const [test, setTest] = useState(false);\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage\n  } = useInfiniteQuery([codeCountry, limit, test], getTweetsAccepted, {\n    getNextPageParam: (lastPage, pages) => {\n      if (lastPage.data.length === limit) return parseInt(lastPage.page) + 1;\n      return false;\n    }\n  });\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row ml-5 mt-4\",\n      children: data === null || data === void 0 ? void 0 : data.pages.map((group, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: group.data.map((tweet, index) => {\n          var _tweet$photos;\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12  p-2 col-lg-5 mx-auto mt-3 border\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              style: {\n                textDecoration: \"none\"\n              },\n              href: `https://twitter.com/${tweet === null || tweet === void 0 ? void 0 : tweet.twitter_username}/status/${tweet === null || tweet === void 0 ? void 0 : tweet.tweet_id}`,\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(Post, {\n                displayName: tweet === null || tweet === void 0 ? void 0 : tweet.name,\n                username: tweet === null || tweet === void 0 ? void 0 : tweet.twitter_username,\n                verified: true,\n                text: tweet === null || tweet === void 0 ? void 0 : tweet.body,\n                avatar: tweet === null || tweet === void 0 ? void 0 : tweet.avatar_id,\n                image: (tweet === null || tweet === void 0 ? void 0 : (_tweet$photos = tweet.photos) === null || _tweet$photos === void 0 ? void 0 : _tweet$photos.length) > 0 && tweet.photos[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: loadMoreButtonRef,\n        onClick: () => fetchNextPage(),\n        disabled: !hasNextPage || isFetchingNextPage,\n        children: isFetchingNextPage ? \"Loading more ....\" : hasNextPage ? \"Load More\" : \"Nothing more to load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TweetsValidés, \"HJXJbRnx3Fc266uQBCog+hLYdJ4=\", false, function () {\n  return [useParams, useInfiniteQuery, useIntersectionObserver];\n});\n\n_c = TweetsValidés;\nexport default TweetsValidés;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetsValid\\xE9s\");","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/pages/webmaster/TweetsValidés.js"],"names":["React","useState","useRef","useInfiniteQuery","useParams","getTweetsAccepted","Post","useIntersectionObserver","TweetsValidés","limit","codeCountry","loadMoreButtonRef","test","setTest","data","fetchNextPage","hasNextPage","isFetchingNextPage","getNextPageParam","lastPage","pages","length","parseInt","page","target","onIntersect","enabled","map","group","i","tweet","index","textDecoration","twitter_username","tweet_id","name","body","avatar_id","photos","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { getTweetsAccepted } from \"../../apis/twitterApi\";\n\nimport Post from \"../../components/aidchannel/tweets/Post\";\nimport useIntersectionObserver from \"../../helpers/useIntersectionObserver\";\n\nconst TweetsValidés = () => {\n  const [limit] = useState(4);\n  const { codeCountry } = useParams();\n  const loadMoreButtonRef = useRef();\n  const [test, setTest] = useState(false);\n\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useInfiniteQuery([codeCountry, limit, test], getTweetsAccepted, {\n    getNextPageParam: (lastPage, pages) => {\n      if (lastPage.data.length === limit) return parseInt(lastPage.page) + 1;\n      return false;\n    },\n  });\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  });\n\n  return (\n    <>\n      <div className=\"row ml-5 mt-4\">\n        {data?.pages.map((group, i) => (\n          <React.Fragment key={i}>\n            {group.data.map((tweet, index) => (\n              <div\n                key={index}\n                className=\"col-12  p-2 col-lg-5 mx-auto mt-3 border\"\n              >\n                <a\n                  style={{ textDecoration: \"none\" }}\n                  href={`https://twitter.com/${tweet?.twitter_username}/status/${tweet?.tweet_id}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  <Post\n                    displayName={tweet?.name}\n                    username={tweet?.twitter_username}\n                    verified={true}\n                    text={tweet?.body}\n                    avatar={tweet?.avatar_id}\n                    image={tweet?.photos?.length > 0 && tweet.photos[0]}\n                  />\n                </a>\n              </div>\n            ))}\n          </React.Fragment>\n        ))}\n      </div>\n      <div style={{ marginTop: \"20px\" }}>\n        <button\n          ref={loadMoreButtonRef}\n          onClick={() => fetchNextPage()}\n          disabled={!hasNextPage || isFetchingNextPage}\n        >\n          {isFetchingNextPage\n            ? \"Loading more ....\"\n            : hasNextPage\n            ? \"Load More\"\n            : \"Nothing more to load\"}\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TweetsValidés;\n"]},"metadata":{},"sourceType":"module"}