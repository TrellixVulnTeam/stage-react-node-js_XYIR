{"ast":null,"code":"import { getRequest, postRequest, deleteRequest, putRequest } from \"./index\"; //projects from DATABASE  projectsByStatus\n\nexport const getProject = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [search, limitPage] = queryKey;\n  const {\n    data\n  } = await getRequest(`project/globalProjectsByKeyWord?searchText=${search}&limit=${limitPage}&page=${pageParam}`);\n  return {\n    data: data.data,\n    page: pageParam\n  };\n}; // get projects by name and status\n\nexport const getProjectByStatus = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [search, limitPage, searchStatus] = queryKey;\n  const {\n    data\n  } = await getRequest(`project/projectsByStatus?searchText=${search}&limit=${limitPage}&page=${pageParam}&status_project=${searchStatus}`);\n  return {\n    data: data.data,\n    page: pageParam\n  };\n}; //project of the month\n\nexport const getProjectsOfMonthApi = async (limit, page) => {\n  try {\n    const res = await postRequest(`project/projectOfMonth?limit=${limit}&page=${page}`, {\n      searchText: \"\"\n    });\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n\n  return [];\n};\nexport const getProjectOfMonthScrolling = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [search, limitPage] = queryKey;\n  const {\n    data\n  } = await postRequest(`project/projectOfMonth?limit=${limitPage}&page=${pageParam}`, {\n    searchText: search\n  });\n  return {\n    data: data === null || data === void 0 ? void 0 : data.data,\n    page: pageParam\n  };\n};\nexport const getProjectByFunder = async (idFunder, limit, page) => {\n  try {\n    const res = await getRequest(`project/byFunder/${idFunder}?limit=${limit}&page=${page}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getProjectsKeywordCountry = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [search, limitPage, codeCountry] = queryKey;\n  const {\n    data\n  } = await postRequest(`project/searchByKeyword?limit=${limitPage}&page=${pageParam}`, {\n    searchText: search,\n    code: codeCountry\n  });\n  return {\n    data: data.data,\n    page: pageParam\n  };\n}; // get project\n\nexport const getProject2 = async project_id => {\n  try {\n    const res = await getRequest(`project/projectDetailData/${project_id}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n\n  return [];\n};\nexport const getNumberProjectsByCountry = async codeCountry => {\n  try {\n    const res = await getRequest(`project/numberProjectsbyCodeCountry/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const AddProject = async project => {\n  try {\n    const res = await postRequest(\"project\", project);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n_c = AddProject;\nexport const deleteProject = async projectID => {\n  try {\n    const res = await deleteRequest(`project/${projectID}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateProject = async (IdProject, project) => {\n  try {\n    const res = await putRequest(`project/${IdProject}`, project);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllHeadProjectsWithIdAndName = async () => {\n  try {\n    const res = await getRequest(\"project/headProjectWithIdAndName\");\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllProjectsByCountry = async codeCountry => {\n  try {\n    const res = await getRequest(`project/ByCodeCountry/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllProjectsOfMonthByCountry = async codeCountry => {\n  try {\n    const res = await getRequest(`project/projectsOfMonthByCodeCountry/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const enablePojectOfMonth = async projectId => {\n  try {\n    const res = await putRequest(`project/enabelProjectOfMonth/${projectId}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const disabledPojectOfMonth = async projectId => {\n  try {\n    const res = await putRequest(`project/disabledProjectOfMonth/${projectId}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllProjectsByCountryNull = async codeCountry => {\n  try {\n    const res = await getRequest(`project/ByCodeCountryNull/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const acceptProject = async projectId => {\n  try {\n    await putRequest(`project/acceptProject/${projectId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const refuseProject = async projectId => {\n  try {\n    await putRequest(`project/refuseProject/${projectId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllProjectsByCountryPagination = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [codeCountry, limit] = queryKey;\n\n  try {\n    const {\n      data\n    } = await postRequest(`project/byCodeCountryPagination/${codeCountry}?limit=${limit}&page=${pageParam}`);\n    return {\n      data: data.data,\n      page: pageParam\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getProjectsAccepted = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [codeCountry, limit] = queryKey;\n\n  try {\n    const {\n      data\n    } = await postRequest(`project/projectsAccepted/${codeCountry}`);\n    return {\n      data: data.data,\n      page: pageParam\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProject\");","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/apis/projectApi.js"],"names":["getRequest","postRequest","deleteRequest","putRequest","getProject","pageParam","queryKey","search","limitPage","data","page","getProjectByStatus","searchStatus","getProjectsOfMonthApi","limit","res","searchText","error","console","log","getProjectOfMonthScrolling","getProjectByFunder","idFunder","getProjectsKeywordCountry","codeCountry","code","getProject2","project_id","getNumberProjectsByCountry","AddProject","project","deleteProject","projectID","updateProject","IdProject","getAllHeadProjectsWithIdAndName","getAllProjectsByCountry","getAllProjectsOfMonthByCountry","enablePojectOfMonth","projectId","disabledPojectOfMonth","getAllProjectsByCountryNull","acceptProject","refuseProject","getAllProjectsByCountryPagination","getProjectsAccepted"],"mappings":"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","sourcesContent":["import { getRequest, postRequest, deleteRequest, putRequest } from \"./index\";\n\n//projects from DATABASE  projectsByStatus\nexport const getProject = async ({ pageParam = 1, queryKey }) => {\n  const [search, limitPage] = queryKey;\n  const { data } = await getRequest(\n    `project/globalProjectsByKeyWord?searchText=${search}&limit=${limitPage}&page=${pageParam}`\n  );\n  return {\n    data: data.data,\n    page: pageParam,\n  };\n};\n// get projects by name and status\nexport const getProjectByStatus = async ({ pageParam = 1, queryKey }) => {\n  const [search, limitPage, searchStatus] = queryKey;\n  const { data } = await getRequest(\n    `project/projectsByStatus?searchText=${search}&limit=${limitPage}&page=${pageParam}&status_project=${searchStatus}`\n  );\n  return {\n    data: data.data,\n    page: pageParam,\n  };\n};\n//project of the month\nexport const getProjectsOfMonthApi = async (limit, page) => {\n  try {\n    const res = await postRequest(\n      `project/projectOfMonth?limit=${limit}&page=${page}`,\n      {\n        searchText: \"\",\n      }\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n  return [];\n};\n\nexport const getProjectOfMonthScrolling = async ({\n  pageParam = 1,\n  queryKey,\n}) => {\n  const [search, limitPage] = queryKey;\n  const { data } = await postRequest(\n    `project/projectOfMonth?limit=${limitPage}&page=${pageParam}`,\n    {\n      searchText: search,\n    }\n  );\n  return { data: data?.data, page: pageParam };\n};\n\nexport const getProjectByFunder = async (idFunder, limit, page) => {\n  try {\n    const res = await getRequest(\n      `project/byFunder/${idFunder}?limit=${limit}&page=${page}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getProjectsKeywordCountry = async ({\n  pageParam = 1,\n  queryKey,\n}) => {\n  const [search, limitPage, codeCountry] = queryKey;\n  const { data } = await postRequest(\n    `project/searchByKeyword?limit=${limitPage}&page=${pageParam}`,\n    {\n      searchText: search,\n      code: codeCountry,\n    }\n  );\n\n  return { data: data.data, page: pageParam };\n};\n\n// get project\nexport const getProject2 = async (project_id) => {\n  try {\n    const res = await getRequest(`project/projectDetailData/${project_id}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n  return [];\n};\n\nexport const getNumberProjectsByCountry = async (codeCountry) => {\n  try {\n    const res = await getRequest(\n      `project/numberProjectsbyCodeCountry/${codeCountry}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const AddProject = async (project) => {\n  try {\n    const res = await postRequest(\"project\", project);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteProject = async (projectID) => {\n  try {\n    const res = await deleteRequest(`project/${projectID}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateProject = async (IdProject, project) => {\n  try {\n    const res = await putRequest(`project/${IdProject}`, project);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllHeadProjectsWithIdAndName = async () => {\n  try {\n    const res = await getRequest(\"project/headProjectWithIdAndName\");\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllProjectsByCountry = async (codeCountry) => {\n  try {\n    const res = await getRequest(`project/ByCodeCountry/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getAllProjectsOfMonthByCountry = async (codeCountry) => {\n  try {\n    const res = await getRequest(\n      `project/projectsOfMonthByCodeCountry/${codeCountry}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const enablePojectOfMonth = async (projectId) => {\n  try {\n    const res = await putRequest(`project/enabelProjectOfMonth/${projectId}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const disabledPojectOfMonth = async (projectId) => {\n  try {\n    const res = await putRequest(`project/disabledProjectOfMonth/${projectId}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getAllProjectsByCountryNull = async (codeCountry) => {\n  try {\n    const res = await getRequest(`project/ByCodeCountryNull/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const acceptProject = async (projectId) => {\n  try {\n    await putRequest(`project/acceptProject/${projectId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const refuseProject = async (projectId) => {\n  try {\n    await putRequest(`project/refuseProject/${projectId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllProjectsByCountryPagination = async ({\n  pageParam = 1,\n  queryKey,\n}) => {\n  const [codeCountry, limit] = queryKey;\n  try {\n    const { data } = await postRequest(\n      `project/byCodeCountryPagination/${codeCountry}?limit=${limit}&page=${pageParam}`\n    );\n    return { data: data.data, page: pageParam };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getProjectsAccepted = async ({ pageParam = 1, queryKey }) => {\n  const [codeCountry, limit] = queryKey;\n  try {\n    const { data } = await postRequest(\n      `project/projectsAccepted/${codeCountry}`\n    );\n    return { data: data.data, page: pageParam };\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}