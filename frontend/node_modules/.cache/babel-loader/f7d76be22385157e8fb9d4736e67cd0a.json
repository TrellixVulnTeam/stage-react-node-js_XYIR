{"ast":null,"code":"var _jsxFileName = \"/Users/yasmine/Desktop/stage/aidchannel-front/src/pages/webmaster/MultiSelectGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Select, { components } from \"react-select\";\nimport { SortableContainer, SortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction arrayMove(array, from, to) {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n}\n\nconst SortableMultiValue = SortableElement(_c = props => {\n  // this prevents the menu from being opened/closed when the user clicks\n  // on a value to begin dragging it. ideally, detecting a click (instead of\n  // a drag) would still focus the control and toggle the menu, but that\n  // requires some magic with refs that are out of scope for this example\n  const onMouseDown = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const innerProps = { ...props.innerProps,\n    onMouseDown\n  };\n  return /*#__PURE__*/_jsxDEV(components.MultiValue, { ...props,\n    innerProps: innerProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n});\n_c2 = SortableMultiValue;\nconst SortableMultiValueLabel = sortableHandle(_c3 = props => /*#__PURE__*/_jsxDEV(components.MultiValueLabel, { ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 3\n}, this));\n_c4 = SortableMultiValueLabel;\nconst SortableSelect = SortableContainer(Select);\n_c5 = SortableSelect;\nexport default function MultiSelectGraph({\n  higherLevelNode,\n  addNode,\n  setModalIsOpen,\n  setSelectedParents,\n  selectedValues\n}) {\n  _s();\n\n  const [selected, setSelected] = useState([]);\n\n  const onChange = selectedOptions => {\n    setSelectedParents(selectedOptions);\n    setSelected(selectedOptions);\n  };\n\n  useEffect(() => {\n    setSelected(selectedValues);\n  }, [selectedValues]);\n  console.log(selectedValues);\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    const newValue = arrayMove(selected, oldIndex, newIndex);\n    setSelected(newValue);\n    console.log(\"Values sorted:\", newValue.map(i => i.value));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SortableSelect, {\n      useDragHandle: true // react-sortable-hoc props:\n      ,\n      axis: \"xy\",\n      onSortEnd: onSortEnd,\n      distance: 4 // small fix for https://github.com/clauderic/react-sortable-hoc/pull/352:\n      ,\n      getHelperDimensions: ({\n        node\n      }) => node.getBoundingClientRect() // react-select props:\n      ,\n      isMulti: true,\n      options: higherLevelNode,\n      value: selected,\n      onChange: onChange,\n      components: {\n        MultiValue: SortableMultiValue,\n        MultiValueLabel: SortableMultiValueLabel\n      },\n      closeMenuOnSelect: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MultiSelectGraph, \"239Ve9yO4iC/9vfIgHzDkghA5LI=\");\n\n_c6 = MultiSelectGraph;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"SortableMultiValue$SortableElement\");\n$RefreshReg$(_c2, \"SortableMultiValue\");\n$RefreshReg$(_c3, \"SortableMultiValueLabel$sortableHandle\");\n$RefreshReg$(_c4, \"SortableMultiValueLabel\");\n$RefreshReg$(_c5, \"SortableSelect\");\n$RefreshReg$(_c6, \"MultiSelectGraph\");","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/pages/webmaster/MultiSelectGraph.js"],"names":["React","useEffect","useState","Select","components","SortableContainer","SortableElement","sortableHandle","arrayMove","array","from","to","slice","splice","length","SortableMultiValue","props","onMouseDown","e","preventDefault","stopPropagation","innerProps","SortableMultiValueLabel","SortableSelect","MultiSelectGraph","higherLevelNode","addNode","setModalIsOpen","setSelectedParents","selectedValues","selected","setSelected","onChange","selectedOptions","console","log","onSortEnd","oldIndex","newIndex","newValue","map","i","value","node","getBoundingClientRect","MultiValue","MultiValueLabel"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Select, { components } from \"react-select\";\nimport {\n  SortableContainer,\n  SortableElement,\n  sortableHandle,\n} from \"react-sortable-hoc\";\n\nfunction arrayMove(array, from, to) {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n}\n\nconst SortableMultiValue = SortableElement((props) => {\n  // this prevents the menu from being opened/closed when the user clicks\n  // on a value to begin dragging it. ideally, detecting a click (instead of\n  // a drag) would still focus the control and toggle the menu, but that\n  // requires some magic with refs that are out of scope for this example\n  const onMouseDown = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n  const innerProps = { ...props.innerProps, onMouseDown };\n  return <components.MultiValue {...props} innerProps={innerProps} />;\n});\n\nconst SortableMultiValueLabel = sortableHandle((props) => (\n  <components.MultiValueLabel {...props} />\n));\n\nconst SortableSelect = SortableContainer(Select);\n\nexport default function MultiSelectGraph({\n  higherLevelNode,\n  addNode,\n  setModalIsOpen,\n  setSelectedParents,\n  selectedValues,\n}) {\n  const [selected, setSelected] = useState([]);\n\n  const onChange = (selectedOptions) => {\n    setSelectedParents(selectedOptions);\n    setSelected(selectedOptions);\n  };\n  useEffect(() => {\n    setSelected(selectedValues);\n  }, [selectedValues]);\n\n  console.log(selectedValues);\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    const newValue = arrayMove(selected, oldIndex, newIndex);\n    setSelected(newValue);\n    console.log(\n      \"Values sorted:\",\n      newValue.map((i) => i.value)\n    );\n  };\n\n  return (\n    <>\n      <SortableSelect\n        useDragHandle\n        // react-sortable-hoc props:\n        axis=\"xy\"\n        onSortEnd={onSortEnd}\n        distance={4}\n        // small fix for https://github.com/clauderic/react-sortable-hoc/pull/352:\n        getHelperDimensions={({ node }) => node.getBoundingClientRect()}\n        // react-select props:\n        isMulti\n        options={higherLevelNode}\n        value={selected}\n        onChange={onChange}\n        components={{\n          MultiValue: SortableMultiValue,\n          MultiValueLabel: SortableMultiValueLabel,\n        }}\n        closeMenuOnSelect={false}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}