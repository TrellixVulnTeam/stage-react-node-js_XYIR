{"ast":null,"code":"import { getRequest, putRequest, postRequest } from \".\";\nexport const getAllTweetsByCountryPagination = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [codeCountry, limit] = queryKey;\n\n  try {\n    const {\n      data\n    } = await getRequest(`twitter/allTweetsPagination/${codeCountry}?limit=${limit}&page=${pageParam}`);\n    return {\n      data: data.data,\n      page: pageParam\n    };\n  } catch (error) {\n    console.log(error);\n  }\n}; //get tweets with search\n\nexport const getAllTweetsByCountryPaginationSearch = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [codeCountry, search, limit] = queryKey;\n\n  try {\n    const {\n      data\n    } = await getRequest(`twitter/allTweetsPagination/${codeCountry}?limit=${limit}&page=${pageParam}`, {\n      searchText: search\n    });\n    return {\n      data: data.data,\n      page: pageParam\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const acceptTweet = async tweetId => {\n  try {\n    await putRequest(`twitter/acceptTweet/${tweetId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const refuseTweet = async tweetId => {\n  try {\n    await putRequest(`twitter/refuseTweet/${tweetId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getTweetsAccepted = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [codeCountry, search, limit] = queryKey;\n\n  try {\n    const {\n      data\n    } = await getRequest(`twitter/TweetsAccepted/${codeCountry}?limit=${limit}&page=${pageParam}`, {\n      searchText: search\n    });\n    return {\n      data: data.data,\n      page: pageParam\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getNumberTweetsByCountry = async codeCountry => {\n  try {\n    const res = await getRequest(`twitter/numberByCodeCountry/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getTweetsByName = async ({\n  pageParam = 1,\n  queryKey\n}) => {\n  const [search, limitPage, codeCountry] = queryKey;\n  const {\n    data\n  } = await postRequest(`twitter/SearchByName?limit=${limitPage}&page=${pageParam}`, {\n    searchText: search,\n    code: codeCountry\n  });\n  return {\n    data: data.data,\n    page: pageParam\n  };\n};","map":{"version":3,"sources":["/Users/yasmine/Desktop/stage/aidchannel-front/src/apis/twitterApi.js"],"names":["getRequest","putRequest","postRequest","getAllTweetsByCountryPagination","pageParam","queryKey","codeCountry","limit","data","page","error","console","log","getAllTweetsByCountryPaginationSearch","search","searchText","acceptTweet","tweetId","refuseTweet","getTweetsAccepted","getNumberTweetsByCountry","res","getTweetsByName","limitPage","code"],"mappings":"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","sourcesContent":["import { getRequest, putRequest ,postRequest} from \".\";\n\nexport const getAllTweetsByCountryPagination = async ({\n  pageParam = 1,\n  queryKey,\n}) => {\n  const [codeCountry, limit] = queryKey;\n  try {\n    const { data } = await getRequest(\n      `twitter/allTweetsPagination/${codeCountry}?limit=${limit}&page=${pageParam}`\n    );\n    return { data: data.data, page: pageParam };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//get tweets with search\nexport const getAllTweetsByCountryPaginationSearch = async ({\n  pageParam = 1,\n  queryKey,\n}) => {\n  const [codeCountry, search, limit] = queryKey;\n  try {\n    const { data } = await getRequest(\n      `twitter/allTweetsPagination/${codeCountry}?limit=${limit}&page=${pageParam}`,\n      {\n        searchText: search,\n      }\n    );\n    return { data: data.data, page: pageParam };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const acceptTweet = async (tweetId) => {\n  try {\n    await putRequest(`twitter/acceptTweet/${tweetId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const refuseTweet = async (tweetId) => {\n  try {\n    await putRequest(`twitter/refuseTweet/${tweetId}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getTweetsAccepted = async ({ pageParam = 1, queryKey }) => {\n  const [codeCountry, search, limit] = queryKey;\n  try {\n    const { data } = await getRequest(\n      `twitter/TweetsAccepted/${codeCountry}?limit=${limit}&page=${pageParam}`,\n      {\n        searchText: search,\n      }\n    );\n    return { data: data.data, page: pageParam };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getNumberTweetsByCountry = async (codeCountry) => {\n  try {\n    const res = await getRequest(`twitter/numberByCodeCountry/${codeCountry}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getTweetsByName = async ({ pageParam = 1, queryKey }) => {\n  const [search, limitPage, codeCountry] = queryKey;\n  const { data } = await postRequest(\n    `twitter/SearchByName?limit=${limitPage}&page=${pageParam}`,\n    {\n      searchText: search,\n      code: codeCountry,\n    }\n  );\n\n  return { data: data.data, page: pageParam };\n};\n"]},"metadata":{},"sourceType":"module"}